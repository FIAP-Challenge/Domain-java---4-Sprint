package br.com.merge.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import br.com.merge.excetion.IdNotFoundException;
import br.com.merge.model.Disc;
import br.com.merge.model.Endereco;
import br.com.merge.model.Telefone;

public class DiscDao {
	
	
private Connection conexao; 
	

	
	public DiscDao(Connection conexao) {
		this.conexao = conexao;
	}
	
	public void cadastrar(Disc disc, int id) throws SQLException {		
	
		PreparedStatement stmt = conexao.prepareStatement("insert into T_MERGE_DISC values "
				+ "(?, sq_T_MERGE_TELEFONE_CANDIDATO.nextval, ?, ?, ?, ?)");
		
		stmt.setInt(1, id);
		stmt.setInt(1, disc.getDominante());
		stmt.setInt(2, disc.getEstavel());
		stmt.setInt(3, disc.getInfluente());
		stmt.setInt(4, disc.getCondescendente());
		
		stmt.executeUpdate();
	}
	
	
	public void atualizar(Disc disc, int id) throws SQLException, IdNotFoundException {
		//Criar o PreparedStatement com o comando SQL de update
		PreparedStatement stmt = conexao.prepareStatement("update T_MERGE_DISC set "
				+ "NR_DOMINANTE = ?, NR_ESTAVEL = ?, NR_INFLUENTE = ?, NR_CONDESCENDENTE = ? where id_candidato = ?");
		
		//Setar os valores na query
		
		stmt.setInt(1, disc.getDominante());
		stmt.setInt(2, disc.getEstavel());
		stmt.setInt(3, disc.getInfluente());
		stmt.setInt(4, disc.getCondescendente());
		stmt.setInt(5, id);
		
	
	
		
		
		//Executar a query e recuperar a qtd de linhas afetadas no banco
		int qtd = stmt.executeUpdate();
		
		//Verifica se algum registro foi modificado no banco
		if (qtd == 0)
			throw new IdNotFoundException("ID NÃO ENCONTRADO PARA ATUALIZAR");
	}


	public Telefone select(int id) throws SQLException, IdNotFoundException {
		
		PreparedStatement stmt = conexao.prepareStatement("select * from T_MERGE_TELEFONE_CANDIDATO where ID_CANDIDATO = ?");
		
		stmt.setInt(1, id);
		
		ResultSet result = stmt.executeQuery();
		
		if(!result.next()) {
			throw new IdNotFoundException("TELEFONE NAO ENCONTRADO");
		}
		int codigo = result.getInt("ID_TELEFONE");
		String ddd = result.getString("NR_DDD");
		String numero = result.getString("NR_TELEFONE");
		String tipo = result.getString("TP_TELEFONE");

				
		
		
		Telefone telefone = new Telefone(codigo, ddd, numero, tipo);		
		return telefone;
	}


	public List<Telefone> select() throws SQLException {
		PreparedStatement stmt = conexao.prepareStatement("SELECT * FROM T_MERGE_TELEFONE_CANDIDATO");
		ResultSet result = stmt.executeQuery();		
		List<Telefone> lista = new ArrayList<Telefone>();
		
		while(result.next()) {
			
			int codigo = result.getInt("ID_TELEFONE");
			String ddd = result.getString("NR_DDD");
			String numero = result.getString("NR_TELEFONE");
			String tipo = result.getString("TP_TELEFONE");

			
			
			Telefone telefone = new Telefone(codigo, ddd,numero, tipo);	
			
			lista.add(telefone);
			
		}
		
		return lista;
	}
	
	
	
	public void remover(int id) throws SQLException, IdNotFoundException{
		
		PreparedStatement stmt = conexao.prepareStatement("DELETE FROM T_MERGE_TELEFONE_CANDIDATO WHERE ID_CANDIDATO = ?");
		
		stmt.setInt(1, id);
		
		int quantidadeDadosAfetados = stmt.executeUpdate();		
		
		if(quantidadeDadosAfetados == 0) {
			throw new IdNotFoundException("ID NÃO ENCONTRADO PARA REMOÇÃO");
		}
	}
	

	
	
	
}
