package br.com.merge.bo;

import java.sql.Connection;
import java.sql.SQLException;
import java.util.List;
import br.com.merge.dao.CandidatoDao;
import br.com.merge.dao.EmpresaDao;
import br.com.merge.excetion.DadoInvalidoException;
import br.com.merge.excetion.IdNotFoundException;
import br.com.merge.model.Candidato;
import br.com.merge.model.Disc;
import br.com.merge.model.Empresa;

public class EmpresaBo {

	private EmpresaDao empresa;
	private EnderecoBo enderecobo;
	private TelefoneBo telefonebo;
	private DiscBo discbo;
	private Connection conexao;

	public EmpresaBo(Connection conexao) {
		this.conexao = conexao;
		empresa = new EmpresaDao(conexao);
//		telefonebo = new TelefoneBo(conexao);
//		enderecobo = new EnderecoBo(conexao);
	}

	public List<Empresa> listar() throws ClassNotFoundException, SQLException, IdNotFoundException {

		return empresa.select();
	}

	public Empresa listar(String cnpj) throws SQLException, IdNotFoundException, ClassNotFoundException {

		return empresa.select(cnpj);
	}

	public void cadastrar(Candidato cand) throws SQLException, ClassNotFoundException, DadoInvalidoException {

		conexao.setAutoCommit(false);

		if (cand.getDisc() != null) {
			try {
				candidato.cadastrar(cand);
				telefonebo.cadastrar(cand.getTelefone());
				enderecobo.cadastrar(cand.getEndereco());
				discbo.cadastrar(cand.getDisc());
			} catch (SQLException e) {
				
				throw new DadoInvalidoException(e.getMessage());
			
			}
	
		} else {

			try {
				candidato.cadastrar(cand);
				telefonebo.cadastrar(cand.getTelefone());
				enderecobo.cadastrar(cand.getEndereco());
				discbo.cadastrar(new Disc(0, 0, 0, 0));
			} catch (SQLException e) {

				throw new DadoInvalidoException(e.getMessage());			}
			

		}

		try {
			conexao.commit();
		} catch (Exception e) {
			conexao.rollback();
			throw new SQLException("Erro ao realizar o commit");
		}

	}

	public void atualizar(Candidato cand) throws ClassNotFoundException, SQLException, IdNotFoundException {
		conexao.setAutoCommit(false);
		
		if(cand.getDisc() != null) {
			candidato.atualizar(cand);
			telefonebo.atualizar(cand.getTelefone(), cand.getCodigo());
			enderecobo.atualizar(cand.getEndereco(), cand.getCodigo());
			discbo.atualizar(cand.getDisc(), cand.getCodigo());
		}else {
			candidato.atualizar(cand);
			telefonebo.atualizar(cand.getTelefone(), cand.getCodigo());
			enderecobo.atualizar(cand.getEndereco(), cand.getCodigo());
		}
		

		try {
			conexao.commit();
		} catch (Exception e) {
			conexao.rollback();
			throw new SQLException("Erro ao realizar o commit");
		}
	}

	public void remover(String cpf) throws SQLException, IdNotFoundException, ClassNotFoundException {
		candidato.remover(cpf);

	}

}
