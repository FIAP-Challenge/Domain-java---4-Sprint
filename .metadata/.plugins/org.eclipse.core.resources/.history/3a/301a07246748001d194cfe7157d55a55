package br.com.merge.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import br.com.merge.excetion.IdNotFoundException;
import br.com.merge.model.Telefone;

public class TelefoneDao {
	
	

private Connection conexao; 
	
	/**
	 * Coleção que armazena os Endereço da aplicacao
	 */
	List<Telefone> listaEndereco = new ArrayList<>();
	
	public void cadastrar(Telefone telefone) throws SQLException {
	
		PreparedStatement stmt = conexao.prepareStatement("insert into T_MERGE_TELEFONE_CANDIDATO values "
				+ "(sq.t_merge_candidato.currval, sq_t_merge_telefone.nextval, ?, ?, ?)");
		
		stmt.setInt(1, telefone.getDDD());
		stmt.setDouble(2, telefone.getNumero());
		stmt.setString(3, telefone.getTipo());
		
	
	
	}
	
	
	public void atualizar(Telefone telefone) throws SQLException, IdNotFoundException {
		//Criar o PreparedStatement com o comando SQL de update
		PreparedStatement stmt = conexao.prepareStatement("update T_MERGE_TELEFONE_CANDIDATO set NR_DDD = ?, NR_TELEFONE = ?, TP_TELEFONE = ? where ID_TELEFONE = ?");
		
		//Setar os valores na query
		stmt.setInt(1, telefone.getDDD());
		stmt.setDouble(2, telefone.getNumero());
		stmt.setString(3, telefone.getTipo());
		stmt.setInt(4, telefone.getCodigo());
		
		//Executar a query e recuperar a qtd de linhas afetadas no banco
		int qtd = stmt.executeUpdate();
		
		//Verifica se algum registro foi modificado no banco
		if (qtd == 0)
			throw new IdNotFoundException("ID NÃO ENCONTRADO PARA ATUALIZAR");
	}


	public Telefone select(int id) throws SQLException, IdNotFoundException {
		
		PreparedStatement stmt = conexao.prepareStatement("select * from T_MERGE_TELEFONE_CANDIDATO where ID_TELEFONE = ?");
		
		stmt.setInt(1, id);
		
		ResultSet result = stmt.executeQuery();
		
		if(!result.next()) {
			throw new IdNotFoundException("ENDEREÇO NAO ENCONTRADO");
		}
		int codigo = result.getInt("ID_TELEFONE");
		int ddd = result.getInt("NR_DDD");
		Double numero = result.getDouble("NR_TELEFONE");
		String tipo = result.getString("TP_TELEFONE");
		
		
				
		
		
		Telefone telefone = new Telefone(codigo, ddd, numero, tipo);		
		return telefone;
	}


	public List<Telefone> select() throws SQLException {
		PreparedStatement stmt = conexao.prepareStatement("SELECT * FROM T_MERGE_TELEFONE_CANDIDATO");
		ResultSet result = stmt.executeQuery();		
		List<Telefone> lista = new ArrayList<Telefone>();
		
		while(result.next()) {
			
			int codigo = result.getInt("ID_ENDERECO_CANDIDATO");
			String cep = result.getString("NR_CEP");
			String bairro = result.getString("NM_BAIRRO");
			String nomeLogradouro = result.getString("NM_LOGRADOURO");
			int numeroLogradouro = result.getInt("NR_LOGRADOURO");
			String complemento = result.getString("DS_COMPLEMENTO");
			String pontoReferencia = result.getString("DS_PONTO_REFERENCIA");
			String cidade = result.getString("NM_CIDADE");
			String estado = result.getString("NM_ESTADO");
			String siglaEstado = result.getString("SG_ESTADO");
			
			Telefone telefone = new Telefone(codigo, cep, bairro, nomeLogradouro, complemento, pontoReferencia, cidade, estado, siglaEstado, numeroLogradouro);	
			
			lista.add(telefone);
		}
		
		return lista;
	}
	
	
	
	
	
	
	public void deletar(int id) throws SQLException, IdNotFoundException{
		
		PreparedStatement stmt = conexao.prepareStatement("DELETE FROM T_MERGE_ENDERECO_CANDIDATO WHERE ID_ENDERECO_CANDIDATO = ?");
		
		stmt.setInt(1, id);
		
		int quantidadeDadosAfetados = stmt.executeUpdate();		
		
		if(quantidadeDadosAfetados == 0) {
			throw new IdNotFoundException("ID NÃO ENCONTRADO PARA REMOÇÃO");
		}
	}
	

	
	
	
	
	

}
