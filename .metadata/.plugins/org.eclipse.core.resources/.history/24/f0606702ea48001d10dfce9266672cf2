package br.com.merge.resource;

import java.sql.Connection;
import java.sql.SQLException;
import java.util.List;

import javax.ws.rs.Consumes;
import javax.ws.rs.DELETE;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.PUT;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.UriBuilder;
import javax.ws.rs.core.UriInfo;

import br.com.merge.bo.DiscBo;
import br.com.merge.excetion.IdNotFoundException;
import br.com.merge.factory.ConnetionFactoy;
import br.com.merge.model.Disc;

@Path("/disc")
public class DiscResource {
	
	private Connection conexao;
	DiscBo discbo;


	@GET
	@Path("/{id}")
	@Produces(MediaType.APPLICATION_JSON)
	public Disc listaDisc(@PathParam("id") int idCandidato)
			throws ClassNotFoundException, SQLException, IdNotFoundException {
		discbo = new DiscBo(conexao = ConnetionFactoy.getConnection());
		

		return discbo.listar(idCandidato);
	}

//	@POST
//	@Path("/{id}")
//	@Consumes(MediaType.APPLICATION_JSON)
//	public Response cadastrar(Disc disc, @Context UriInfo uriInfo)
//			throws SQLException, ClassNotFoundException {
//		discbo = new DiscBo(conexao = ConnetionFactoy.getConnection());
//		// GERANDO O CÓDIGO DO PRODUTO
//		discbo.cadastrarPorId(disc);
//		System.out.println(disc.toString());
//
//		// CONSTRUIR A URI DE RETORNO
//		UriBuilder builder = uriInfo.getAbsolutePathBuilder();
//
//		// PARSEANDO E CONCATENANDO O CÓDIGO DO PRODUTO COM A URL
//		builder.path(Integer.toString(disc.getCodigo()));
//		conexao.close();
//		// RETORNANDO A URL E TESTANDO A SOLICITAÇÃO E REALIZANDO O POST.
//		return Response.created(builder.build()).build(); 
//
//	}

	@PUT
	@Path("/{id}")
	@Consumes(MediaType.APPLICATION_JSON)
	public Response atualizar(Disc disc, @PathParam("id") int id) throws ClassNotFoundException, SQLException, IdNotFoundException {
		discbo = new DiscBo(conexao = ConnetionFactoy.getConnection());
		
		System.out.println("ID RESOURCE" + id);
		DiscBo discbo = new DiscBo(conexao);
		disc.setCodigo(id);
		discbo.atualizar(disc, id);
		conexao.close();

		return Response.ok().build();
	
	}

	@DELETE
	@Path("{id}")
	public void excluir(@PathParam("id") int id) throws ClassNotFoundException, SQLException, IdNotFoundException {
		discbo = new DiscBo(conexao = ConnetionFactoy.getConnection());
		
		discbo.remover(id);
		conexao.close();

	}
}
