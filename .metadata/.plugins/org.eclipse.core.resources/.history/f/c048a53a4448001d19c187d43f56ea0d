package br.com.merge.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import br.com.merge.bo.EnderecoBo;
import br.com.merge.excetion.IdNotFoundException;
import br.com.merge.model.Candidato;
import br.com.merge.model.Endereco;

/**
 * Classe responsável por cadastrar, encontrar, alterar senha e listar um
 * Candidato
 * 
 * @author Henrique Cesar
 * @author Dennys Nascimenro
 * @author Luan Reis
 * @author Gustavo Fonseca
 *
 */
public class CandidatoDao {

	private Connection conexao;

	/**
	 * Coleção que armazena os Candidatos da aplicacao
	 */
	List<Candidato> listaCandidato = new ArrayList<>();

	/**
	 * Método que cadastra um candidato
	 * 
	 * @param candidato
	 * @param email     do candidato
	 * @return se esse emai já está cadastrado ou se foi cadastrado
	 * @throws ClassNotFoundException
	 * @throws SQLException
	 */

	public CandidatoDao(Connection conexao) {
		this.conexao = conexao;
	}

	public void cadastrar(Candidato candidato) throws SQLException {

		PreparedStatement stmt = conexao.prepareStatement(
				"insert into T_MERGE_CANDIDATO values "
						+ "(sq_t_merge_candidato.nextval, ?, ?, to_date(?,'dd/mm/yyyy'), ?, ?, ?, ?, ?, ? )",
				new String[] { "id_candidato" });

		stmt.setString(1, candidato.getNome());
		stmt.setString(2, candidato.getCpf());
		stmt.setString(3, candidato.getDtNascimento());
		stmt.setString(4, candidato.getEstadoCivil());
		stmt.setString(5, candidato.getSexo());
		stmt.setString(6, candidato.getEmail());
		stmt.setString(7, candidato.getSenhaLogin());
		stmt.setString(8, candidato.getStatusLogin());
		stmt.setString(9, candidato.getTipoLogin());

		stmt.executeUpdate();

		ResultSet result = stmt.getGeneratedKeys();
		if (result.next()) {
			int codigo = result.getInt(1);
			candidato.setCodigo(codigo);
		}

	}

	public void atualizar(Candidato candidato) throws SQLException, IdNotFoundException {
		// Criar o PreparedStatement com o comando SQL de update
		String sql = ("UPDATE T_MERGE_CANDIDATO SET NM_CANDIDATO = ?, NR_CPF = ?, DT_NASCIMENTO = to_date(?,'dd/mm/yyyy'), DS_ESTADO_CIVIL = ?, DS_SEXO = ?, DS_EMAIL = ?, PS_SENHA = ?,  ST_LOGIN = ?, TP_LOGIN = ?  where ID_CANDIDATO = ?");
		PreparedStatement stmt = conexao.prepareStatement(sql);

		// Setar os valores na query
		stmt.setString(1, candidato.getNome());
		stmt.setString(2, candidato.getCpf());
		stmt.setString(3, candidato.getDtNascimento());
		stmt.setString(4, candidato.getEstadoCivil());
		stmt.setString(5, candidato.getSexo());
		stmt.setString(6, candidato.getEmail());
		stmt.setString(7, candidato.getSenhaLogin());
		stmt.setString(8, candidato.getStatusLogin());
		stmt.setString(9, candidato.getTipoLogin());
		stmt.setInt(10, candidato.getCodigo());

		// Executar a query e recuperar a qtd de linhas afetadas no banco
		int qtd = stmt.executeUpdate();

		// Verifica se algum registro foi modificado no banco
		if (qtd == 0)
			throw new IdNotFoundException("Não localizado para alterar");

	}

	/**
	 * Método que encontra na lista o candidato pelo cpf
	 * 
	 * @param cpf dop candidato
	 * @return o candidato
	 * @throws SQLException
	 * @throws IdNotFoundException
	 * @throws ClassNotFoundException
	 */
	public Candidato select(String cpf) throws SQLException, IdNotFoundException, ClassNotFoundException {

		PreparedStatement stmt = conexao.prepareStatement("select * from T_MERGE_CANDIDATO where NR_CPF = ?");

		stmt.setString(1, cpf);

		ResultSet result = stmt.executeQuery();

		if (!result.next()) {
			throw new IdNotFoundException("CANDIDATO NÃO ENCONTRADO");
		}
		int codigo = result.getInt("ID_CANDIDATO");
		String nome = result.getString("NM_CANDIDATO");
		String dataNascim = result.getString("DT_NASCIMENTO");
		String estadoCivil = result.getString("DS_ESTADO_CIVIL");
		String sexo = result.getString("DS_SEXO");
		String email = result.getString("DS_EMAIL");
		String senha = result.getString("PS_SENHA");
		String statusLogin = result.getString("ST_LOGIN");
		String tipoLogin = result.getString("TP_LOGIN");
		EnderecoBo endereco = new EnderecoBo(conexao);

		System.out.println(codigo);

		System.out.println(endereco.toString()); // apagar dps

		Endereco end = new Endereco(endereco.listar(codigo));
		Candidato candidato = new Candidato(codigo, nome, cpf, dataNascim, estadoCivil, sexo, email, senha, statusLogin,
				tipoLogin);

		return candidato;
	}

	/**
	 * Lista os candidatos
	 * 
	 * @return a lista de candidatos
	 * @throws SQLException
	 * @throws IdNotFoundException
	 * @throws ClassNotFoundException
	 */
	public List<Candidato> select() throws SQLException, ClassNotFoundException, IdNotFoundException {
		PreparedStatement stmt = conexao.prepareStatement("SELECT * FROM T_MERGE_CANDIDATO");
		ResultSet result = stmt.executeQuery();
		List<Candidato> lista = new ArrayList<Candidato>();

		while (result.next()) {
			
			int codigo = result.getInt("ID_CANDIDATO");
			String nome = result.getString("NM_CANDIDATO");
			String cpf = result.getString("NR_CPF");
			String dataNascim = result.getString("DT_NASCIMENTO");
			String estadoCivil = result.getString("DS_ESTADO_CIVIL");
			String sexo = result.getString("DS_SEXO");
			String email = result.getString("DS_EMAIL");
			String senha = result.getString("PS_SENHA");
			String statusLogin = result.getString("ST_LOGIN");
			String tipoLogin = result.getString("TP_LOGIN");

			EnderecoBo endereco = new EnderecoBo(conexao);
			int codigoEndereco = endereco.listar(codigo).getCodigo();
			String cep = endereco.listar(codigo).getCep();
			String bairro = endereco.listar(codigo).getBairro();
			int numero = endereco.listar(codigo).getNumeroLogradouro();
			String nomeLogradouro = endereco.listar(codigo).getLogradouro();
			String complemento = endereco.listar(codigo).getComplemento();
			String pontoReferencia = endereco.listar(codigo).getPontoReferencia();
			String nomeCidade = endereco.listar(codigo).getCidade();
			String nomeEstado = endereco.listar(codigo).getEstado();
			String SiglaEstado = endereco.listar(codigo).getSiglaEstado();
			

			Endereco end = new Endereco(1, "041231", "sao", 1, "dsadas", "dsada", "dsdasda", "dsada", "dsada", "dasda");		
			Candidato candt = new Candidato(1, "luan", "3213131", "sexo", "adada", "adssada", "dsadsa", "dsada", end, "aa", "aaa");
			
		
			Endereco enderecoCandidato = new Endereco(codigoEndereco, cep, bairro, numero, nomeLogradouro, complemento, pontoReferencia, nomeCidade, nomeEstado, SiglaEstado);
			System.out.println(enderecoCandidato.toString());
			Candidato candidato = new Candidato(codigo, nome, cpf, dataNascim, estadoCivil, sexo, email, enderecoCandidato, senha,
					statusLogin, tipoLogin);

			lista.add(candt);
			lista.forEach((c) -> System.out.println(c));

		}

		return lista;
	}

	
	public void remover(String cpf) throws SQLException, IdNotFoundException {

		PreparedStatement stmt = conexao.prepareStatement("DELETE FROM T_MERGE_CANDIDATO WHERE NR_CPF = ?");

		stmt.setString(1, cpf);

		int quantidadeDadosAfetados = stmt.executeUpdate();

		if (quantidadeDadosAfetados == 0) {
			throw new IdNotFoundException("CPF NÃO ENCONTRADO PARA REMOÇÃO");

		}

	}

}
